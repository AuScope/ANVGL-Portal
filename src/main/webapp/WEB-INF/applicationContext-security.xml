<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/security"
         xmlns:s="http://www.springframework.org/schema/security"
         xmlns:beans="http://www.springframework.org/schema/beans"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://www.springframework.org/schema/beans
                             http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
                             http://www.springframework.org/schema/security
                             http://www.springframework.org/schema/security/spring-security-4.0.xsd">

<!-- 
    <http />
    <user-service>
        <user name="user" password="password" authorities="ROLE_USER" />
    </user-service>
-->


    
    <!-- <http pattern="/aaf/" security="none"/>-->
    <!-- <http pattern="/aaf.do" security="none"/>-->
    <!-- <http pattern="/aaf.html" security="none"/>-->
    
    
    
    <beans:bean id="clientAuthenticationEntryPoint_2" class="org.springframework.security.web.authentication.www.BasicAuthenticationEntryPoint">
        <beans:property name="realmName" value="ANVGL-Portal-AAF-login" />
    </beans:bean>
    
    <!-- <http pattern="/aaf/login" security="none"/>-->
    
    <!-- <http pattern="/aaf" security="none"/>-->
    <http pattern="/aaf/**" entry-point-ref="clientAuthenticationEntryPoint_2" create-session="stateless">
        <intercept-url pattern="/aaf/login" access="isAnonymous()"/>
        <csrf disabled="true"/>
        <custom-filter before="FORM_LOGIN_FILTER" ref="aafFilter"/>
    </http>
    
    
    
    <beans:bean id="aafFilter" class="org.auscope.portal.server.web.security.aaf.AAFAuthenticationFilter">
       <!-- <beans:property name="authenticationManager" ref="aafAuthenticationManager" />-->
       <beans:property name="authenticationManager" ref="authenticationManager" />
    </beans:bean>
        
    <beans:bean id="aafProvider" class="org.auscope.portal.server.web.security.aaf.AAFAuthenticationProvider">
       <beans:property name="jwtManagement" ref="jwtManagement" />
   </beans:bean>

   <beans:bean id="jwtManagement" class="org.auscope.portal.server.web.security.aaf.JWTManagement">
       <beans:property name="jwtSecret" value="${HOST.jwtSecret}" />
       <beans:property name="rootServiceUrl" value="${HOST.rootServiceUrl}" />
       <!-- <beans:property name="dataSource" ref="dataSource"/>-->
   </beans:bean>
   
   <authentication-manager alias="authenticationManager">
        <authentication-provider ref="aafProvider" />
   </authentication-manager>
   <!-- 
   <authentication-manager id="aafAuthenticationManager">
        <authentication-provider ref="aafProvider" />
   </authentication-manager>
   -->
   
   
   
<!--
    <authentication-manager alias="authenticationManager" xmlns="http://www.springframework.org/schema/security">
        <authentication-provider>
            <jdbc-user-service data-source-ref="dataSource" />
            <password-encoder ref="passwordEncoder" />
        </authentication-provider>
-->

<!-- 
<bean id="propertyConfigurer"
   class="csiro.truststore.util.HostPrecedingPropertyPlaceholderConfigurer">
   <property name="location" value="classpath:config.properties" />
  </bean>
  
-->



    <!-- AAF -->
<!-- 
    <http pattern="/oauth/token" create-session="stateless" authentication-manager-ref="clientAuthenticationManager"
        xmlns="http://www.springframework.org/schema/security">
        <intercept-url pattern="/oauth/token" access="IS_AUTHENTICATED_FULLY" />
        <anonymous enabled="false" />
        <http-basic entry-point-ref="clientAuthenticationEntryPoint" />
-->
        <!-- include this only if you need to authenticate clients via request parameters -->
<!-- 
        <custom-filter ref="clientCredentialsTokenEndpointFilter" before="BASIC_AUTH_FILTER" />
        <access-denied-handler ref="oauthAccessDeniedHandler" />
    </http>
-->


    <!-- ORIGINAL GOOGLE AUTH -->
    <http entry-point-ref="oAuth2EntryPoint">
        <headers>
            <frame-options policy="SAMEORIGIN"/>
        </headers>
        <intercept-url pattern="/login.html" access="isAuthenticated()"/>
        <intercept-url pattern="/gridsubmit.html" access="isAuthenticated()"/>
        <intercept-url pattern="/jobbuilder.html" access="isAuthenticated()"/>
        <intercept-url pattern="/user.html" access="isAuthenticated()"/>
        <intercept-url pattern="/joblist.html" access="isAuthenticated()"/>
        <intercept-url pattern="/secure/*" access="isAuthenticated()"/>
        <intercept-url pattern="/admin.html" access="hasRole('ROLE_ADMINISTRATOR')"/>
        <intercept-url pattern="/*.diag" access="hasRole('ROLE_ADMINISTRATOR')"/>                
        <!-- <intercept-url pattern="/aaf/login" access="isAnonymous()"/> -->
        <custom-filter ref="oauth2AuthFilter" after="EXCEPTION_TRANSLATION_FILTER"/>
        <logout logout-url="/j_spring_security_logout" logout-success-url="/gmap.html"/>
        <s:csrf disabled="true"/>
    </http>

    <beans:bean id="oAuth2EntryPoint" class="com.racquettrack.security.oauth.OAuth2AuthenticationEntryPoint">
        <beans:property name="oAuth2ServiceProperties" ref="oauth2ServiceProperties"/>
    </beans:bean>

    <beans:bean id="oauth2AuthFilter" class="com.racquettrack.security.oauth.OAuth2AuthenticationFilter">
        <beans:constructor-arg name="defaultFilterProcessesUrl" value="/oauth/callback"/>
        <beans:property name="authenticationManager" ref="authenticationManager"/>
        <beans:property name="oAuth2ServiceProperties" ref="oauth2ServiceProperties"/>
        <beans:property name="authenticationSuccessHandler">
            <beans:bean class="org.auscope.portal.server.web.security.RedirectUnconfiguredUserHandler">
            </beans:bean>        
        </beans:property>
    </beans:bean>

    <beans:bean id="oauth2AuthenticationProvider" class="com.racquettrack.security.oauth.OAuth2AuthenticationProvider">
        <beans:property name="authenticatedUserDetailsService" ref="oAuth2UserDetailsService"/>
        <beans:property name="oAuth2ServiceProperties" ref="oauth2ServiceProperties"/>
    </beans:bean>

    <!-- <authentication-manager alias="authenticationManager"> -->
    <authentication-manager id="authenticationManager">
        <authentication-provider ref="oauth2AuthenticationProvider">
        </authentication-provider>
    </authentication-manager>

    <beans:bean id="oauth2ServiceProperties" class="org.auscope.portal.core.server.security.oauth2.GoogleOAuth2ServiceProperties">
        <beans:constructor-arg name="redirectUri" value="/oauth/callback"/>
        <beans:constructor-arg name="clientId" value="${env.oauth2.google.clientid}"/>
        <beans:constructor-arg name="clientSecret" value="${env.oauth2.google.clientsecret}"/>
    </beans:bean>

    <beans:bean id="simpleUserLoader" class="org.auscope.portal.server.web.security.PersistedGoogleUserDetailsLoader">
        <beans:constructor-arg name="defaultRole" value="ROLE_USER"/>
        <beans:constructor-arg name="rolesByUser">
            <beans:map>
                <!-- Joshua Vote -->
                <beans:entry key="105810302719127403909">
                    <beans:list>
                        <beans:value>ROLE_ADMINISTRATOR</beans:value>
                        <beans:value>ROLE_UBC</beans:value>
                    </beans:list>
                </beans:entry>
            </beans:map>
        </beans:constructor-arg>
        <beans:property name="userDao" ref="anvglUserDao"/>
    </beans:bean>

    <beans:bean id="oAuth2DefaultUserInfoProvider" class="com.racquettrack.security.oauth.DefaultOAuth2UserInfoProvider">
        <beans:property name="oAuth2ServiceProperties" ref="oauth2ServiceProperties"/>
    </beans:bean>

    <beans:bean id="oAuth2UserDetailsService" class="com.racquettrack.security.oauth.OAuth2UserDetailsService">
        <beans:property name="oAuth2UserDetailsLoader" ref="simpleUserLoader"/>
        <beans:property name="oAuth2ServiceProperties" ref="oauth2ServiceProperties"/>
        <beans:property name="oAuth2UserInfoProvider" ref="oAuth2DefaultUserInfoProvider"/>
    </beans:bean>

</beans:beans>